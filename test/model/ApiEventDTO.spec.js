/*
 * Revenium Metering API
 * Revenium Metering API
 *
 * OpenAPI spec version: 1.14.0-SNAPSHOT
 * Contact: info@revenium.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ReveniumMeteringApi);
  }
}(this, function(expect, ReveniumMeteringApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ApiEventDTO', function() {
      beforeEach(function() {
        instance = new ReveniumMeteringApi.ApiEventDTO();
      });

      it('should create an instance of ApiEventDTO', function() {
        // TODO: update the code to test ApiEventDTO
        expect(instance).to.be.a(ReveniumMeteringApi.ApiEventDTO);
      });

      it('should have the property requestId (base name: "requestId")', function() {
        // TODO: update the code to test the property requestId
        expect(instance).to.have.property('requestId');
        // expect(instance.requestId).to.be(expectedValueLiteral);
      });

      it('should have the property eventType (base name: "eventType")', function() {
        // TODO: update the code to test the property eventType
        expect(instance).to.have.property('eventType');
        // expect(instance.eventType).to.be(expectedValueLiteral);
      });

      it('should have the property assetId (base name: "assetId")', function() {
        // TODO: update the code to test the property assetId
        expect(instance).to.have.property('assetId');
        // expect(instance.assetId).to.be(expectedValueLiteral);
      });

      it('should have the property productKey (base name: "productKey")', function() {
        // TODO: update the code to test the property productKey
        expect(instance).to.have.property('productKey');
        // expect(instance.productKey).to.be(expectedValueLiteral);
      });

      it('should have the property application (base name: "application")', function() {
        // TODO: update the code to test the property application
        expect(instance).to.have.property('application');
        // expect(instance.application).to.be(expectedValueLiteral);
      });

      it('should have the property method (base name: "method")', function() {
        // TODO: update the code to test the property method
        expect(instance).to.have.property('method');
        // expect(instance.method).to.be(expectedValueLiteral);
      });

      it('should have the property currentMillis (base name: "currentMillis")', function() {
        // TODO: update the code to test the property currentMillis
        expect(instance).to.have.property('currentMillis');
        // expect(instance.currentMillis).to.be(expectedValueLiteral);
      });

      it('should have the property uri (base name: "uri")', function() {
        // TODO: update the code to test the property uri
        expect(instance).to.have.property('uri');
        // expect(instance.uri).to.be(expectedValueLiteral);
      });

      it('should have the property elapsedTime (base name: "elapsedTime")', function() {
        // TODO: update the code to test the property elapsedTime
        expect(instance).to.have.property('elapsedTime');
        // expect(instance.elapsedTime).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property responseCode (base name: "responseCode")', function() {
        // TODO: update the code to test the property responseCode
        expect(instance).to.have.property('responseCode');
        // expect(instance.responseCode).to.be(expectedValueLiteral);
      });

      it('should have the property requestMessageSize (base name: "requestMessageSize")', function() {
        // TODO: update the code to test the property requestMessageSize
        expect(instance).to.have.property('requestMessageSize');
        // expect(instance.requestMessageSize).to.be(expectedValueLiteral);
      });

      it('should have the property responseMessageSize (base name: "responseMessageSize")', function() {
        // TODO: update the code to test the property responseMessageSize
        expect(instance).to.have.property('responseMessageSize');
        // expect(instance.responseMessageSize).to.be(expectedValueLiteral);
      });

      it('should have the property contentType (base name: "contentType")', function() {
        // TODO: update the code to test the property contentType
        expect(instance).to.have.property('contentType');
        // expect(instance.contentType).to.be(expectedValueLiteral);
      });

      it('should have the property remoteHost (base name: "remoteHost")', function() {
        // TODO: update the code to test the property remoteHost
        expect(instance).to.have.property('remoteHost');
        // expect(instance.remoteHost).to.be(expectedValueLiteral);
      });

      it('should have the property userAgent (base name: "userAgent")', function() {
        // TODO: update the code to test the property userAgent
        expect(instance).to.have.property('userAgent');
        // expect(instance.userAgent).to.be(expectedValueLiteral);
      });

      it('should have the property correlationId (base name: "correlationId")', function() {
        // TODO: update the code to test the property correlationId
        expect(instance).to.have.property('correlationId');
        // expect(instance.correlationId).to.be(expectedValueLiteral);
      });

      it('should have the property backendLatency (base name: "backendLatency")', function() {
        // TODO: update the code to test the property backendLatency
        expect(instance).to.have.property('backendLatency');
        // expect(instance.backendLatency).to.be(expectedValueLiteral);
      });

      it('should have the property clientId (base name: "clientId")', function() {
        // TODO: update the code to test the property clientId
        expect(instance).to.have.property('clientId');
        // expect(instance.clientId).to.be(expectedValueLiteral);
      });

      it('should have the property source (base name: "source")', function() {
        // TODO: update the code to test the property source
        expect(instance).to.have.property('source');
        // expect(instance.source).to.be(expectedValueLiteral);
      });

    });
  });

}));
