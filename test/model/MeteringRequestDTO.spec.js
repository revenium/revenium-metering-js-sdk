/*
 * Revenium Metering API
 * Revenium Metering API
 *
 * OpenAPI spec version: 1.14.0-SNAPSHOT
 * Contact: info@revenium.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ReveniumMeteringApi);
  }
}(this, function(expect, ReveniumMeteringApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MeteringRequestDTO', function() {
      beforeEach(function() {
        instance = new ReveniumMeteringApi.MeteringRequestDTO();
      });

      it('should create an instance of MeteringRequestDTO', function() {
        // TODO: update the code to test MeteringRequestDTO
        expect(instance).to.be.a(ReveniumMeteringApi.MeteringRequestDTO);
      });

      it('should have the property api (base name: "api")', function() {
        // TODO: update the code to test the property api
        expect(instance).to.have.property('api');
        // expect(instance.api).to.be(expectedValueLiteral);
      });

      it('should have the property productKey (base name: "productKey")', function() {
        // TODO: update the code to test the property productKey
        expect(instance).to.have.property('productKey');
        // expect(instance.productKey).to.be(expectedValueLiteral);
      });

      it('should have the property application (base name: "application")', function() {
        // TODO: update the code to test the property application
        expect(instance).to.have.property('application');
        // expect(instance.application).to.be(expectedValueLiteral);
      });

      it('should have the property method (base name: "method")', function() {
        // TODO: update the code to test the property method
        expect(instance).to.have.property('method');
        // expect(instance.method).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property backendLatency (base name: "backendLatency")', function() {
        // TODO: update the code to test the property backendLatency
        expect(instance).to.have.property('backendLatency');
        // expect(instance.backendLatency).to.be(expectedValueLiteral);
      });

      it('should have the property gatewayLatency (base name: "gatewayLatency")', function() {
        // TODO: update the code to test the property gatewayLatency
        expect(instance).to.have.property('gatewayLatency');
        // expect(instance.gatewayLatency).to.be(expectedValueLiteral);
      });

      it('should have the property responseCode (base name: "responseCode")', function() {
        // TODO: update the code to test the property responseCode
        expect(instance).to.have.property('responseCode');
        // expect(instance.responseCode).to.be(expectedValueLiteral);
      });

      it('should have the property timedOut (base name: "timedOut")', function() {
        // TODO: update the code to test the property timedOut
        expect(instance).to.have.property('timedOut');
        // expect(instance.timedOut).to.be(expectedValueLiteral);
      });

      it('should have the property requestMessageSize (base name: "requestMessageSize")', function() {
        // TODO: update the code to test the property requestMessageSize
        expect(instance).to.have.property('requestMessageSize');
        // expect(instance.requestMessageSize).to.be(expectedValueLiteral);
      });

      it('should have the property responseMessageSize (base name: "responseMessageSize")', function() {
        // TODO: update the code to test the property responseMessageSize
        expect(instance).to.have.property('responseMessageSize');
        // expect(instance.responseMessageSize).to.be(expectedValueLiteral);
      });

      it('should have the property requestHeaders (base name: "requestHeaders")', function() {
        // TODO: update the code to test the property requestHeaders
        expect(instance).to.have.property('requestHeaders');
        // expect(instance.requestHeaders).to.be(expectedValueLiteral);
      });

      it('should have the property responseHeaders (base name: "responseHeaders")', function() {
        // TODO: update the code to test the property responseHeaders
        expect(instance).to.have.property('responseHeaders');
        // expect(instance.responseHeaders).to.be(expectedValueLiteral);
      });

      it('should have the property userAgent (base name: "userAgent")', function() {
        // TODO: update the code to test the property userAgent
        expect(instance).to.have.property('userAgent');
        // expect(instance.userAgent).to.be(expectedValueLiteral);
      });

      it('should have the property remoteUser (base name: "remoteUser")', function() {
        // TODO: update the code to test the property remoteUser
        expect(instance).to.have.property('remoteUser');
        // expect(instance.remoteUser).to.be(expectedValueLiteral);
      });

      it('should have the property remoteHost (base name: "remoteHost")', function() {
        // TODO: update the code to test the property remoteHost
        expect(instance).to.have.property('remoteHost');
        // expect(instance.remoteHost).to.be(expectedValueLiteral);
      });

      it('should have the property httpProtocol (base name: "httpProtocol")', function() {
        // TODO: update the code to test the property httpProtocol
        expect(instance).to.have.property('httpProtocol');
        // expect(instance.httpProtocol).to.be(expectedValueLiteral);
      });

      it('should have the property contentType (base name: "contentType")', function() {
        // TODO: update the code to test the property contentType
        expect(instance).to.have.property('contentType');
        // expect(instance.contentType).to.be(expectedValueLiteral);
      });

      it('should have the property correlationId (base name: "correlationId")', function() {
        // TODO: update the code to test the property correlationId
        expect(instance).to.have.property('correlationId');
        // expect(instance.correlationId).to.be(expectedValueLiteral);
      });

      it('should have the property platformAPIKey (base name: "platformAPIKey")', function() {
        // TODO: update the code to test the property platformAPIKey
        expect(instance).to.have.property('platformAPIKey');
        // expect(instance.platformAPIKey).to.be(expectedValueLiteral);
      });

      it('should have the property elements (base name: "elements")', function() {
        // TODO: update the code to test the property elements
        expect(instance).to.have.property('elements');
        // expect(instance.elements).to.be(expectedValueLiteral);
      });

      it('should have the property source (base name: "source")', function() {
        // TODO: update the code to test the property source
        expect(instance).to.have.property('source');
        // expect(instance.source).to.be(expectedValueLiteral);
      });

    });
  });

}));
