/*
 * Revenium Metering API
 * Revenium Metering API
 *
 * OpenAPI spec version: 1.14.0-SNAPSHOT
 * Contact: info@revenium.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import ElementDTO from './ElementDTO';

/**
 * The MeteringRequestDTO model module.
 * @module model/MeteringRequestDTO
 * @version 1.14.0-SNAPSHOT
 */
export default class MeteringRequestDTO {
  /**
   * Constructs a new <code>MeteringRequestDTO</code>.
   * @alias module:model/MeteringRequestDTO
   * @class
   * @param method {String} The HTTP method being invoked
   * @param responseCode {Number} Backend HTTP response code
   * @param requestHeaders {Array.<String>} The comma seperated list of names of the headers in the request
   * @param responseHeaders {Array.<String>} The comma seperated list of names of the headers in the response
   * @param platformAPIKey {String} platformAPIKey
   * @param elements {Array.<module:model/ElementDTO>} Dynamic metering elements
   */
  constructor(method, responseCode, requestHeaders, responseHeaders, platformAPIKey, elements) {
    this.method = method;
    this.responseCode = responseCode;
    this.requestHeaders = requestHeaders;
    this.responseHeaders = responseHeaders;
    this.platformAPIKey = platformAPIKey;
    this.elements = elements;
  }

  /**
   * Constructs a <code>MeteringRequestDTO</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MeteringRequestDTO} obj Optional instance to populate.
   * @return {module:model/MeteringRequestDTO} The populated <code>MeteringRequestDTO</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new MeteringRequestDTO();
      if (data.hasOwnProperty('api'))
        obj.api = ApiClient.convertToType(data['api'], 'String');
      if (data.hasOwnProperty('productKey'))
        obj.productKey = ApiClient.convertToType(data['productKey'], 'String');
      if (data.hasOwnProperty('application'))
        obj.application = ApiClient.convertToType(data['application'], 'String');
      if (data.hasOwnProperty('method'))
        obj.method = ApiClient.convertToType(data['method'], 'String');
      if (data.hasOwnProperty('url'))
        obj.url = ApiClient.convertToType(data['url'], 'String');
      if (data.hasOwnProperty('metadata'))
        obj.metadata = ApiClient.convertToType(data['metadata'], 'String');
      if (data.hasOwnProperty('backendLatency'))
        obj.backendLatency = ApiClient.convertToType(data['backendLatency'], 'Number');
      if (data.hasOwnProperty('gatewayLatency'))
        obj.gatewayLatency = ApiClient.convertToType(data['gatewayLatency'], 'Number');
      if (data.hasOwnProperty('responseCode'))
        obj.responseCode = ApiClient.convertToType(data['responseCode'], 'Number');
      if (data.hasOwnProperty('timedOut'))
        obj.timedOut = ApiClient.convertToType(data['timedOut'], 'Boolean');
      if (data.hasOwnProperty('requestMessageSize'))
        obj.requestMessageSize = ApiClient.convertToType(data['requestMessageSize'], 'Number');
      if (data.hasOwnProperty('responseMessageSize'))
        obj.responseMessageSize = ApiClient.convertToType(data['responseMessageSize'], 'Number');
      if (data.hasOwnProperty('requestHeaders'))
        obj.requestHeaders = ApiClient.convertToType(data['requestHeaders'], ['String']);
      if (data.hasOwnProperty('responseHeaders'))
        obj.responseHeaders = ApiClient.convertToType(data['responseHeaders'], ['String']);
      if (data.hasOwnProperty('userAgent'))
        obj.userAgent = ApiClient.convertToType(data['userAgent'], 'String');
      if (data.hasOwnProperty('remoteUser'))
        obj.remoteUser = ApiClient.convertToType(data['remoteUser'], 'String');
      if (data.hasOwnProperty('remoteHost'))
        obj.remoteHost = ApiClient.convertToType(data['remoteHost'], 'String');
      if (data.hasOwnProperty('httpProtocol'))
        obj.httpProtocol = ApiClient.convertToType(data['httpProtocol'], 'String');
      if (data.hasOwnProperty('contentType'))
        obj.contentType = ApiClient.convertToType(data['contentType'], 'String');
      if (data.hasOwnProperty('correlationId'))
        obj.correlationId = ApiClient.convertToType(data['correlationId'], 'String');
      if (data.hasOwnProperty('platformAPIKey'))
        obj.platformAPIKey = ApiClient.convertToType(data['platformAPIKey'], 'String');
      if (data.hasOwnProperty('elements'))
        obj.elements = ApiClient.convertToType(data['elements'], [ElementDTO]);
      if (data.hasOwnProperty('source'))
        obj.source = ApiClient.convertToType(data['source'], 'String');
    }
    return obj;
  }
}

/**
 * @member {String} api
 */
MeteringRequestDTO.prototype.api = undefined;

/**
 * The Product Key ID
 * @member {String} productKey
 */
MeteringRequestDTO.prototype.productKey = undefined;

/**
 * The Application ID
 * @member {String} application
 */
MeteringRequestDTO.prototype.application = undefined;

/**
 * The HTTP method being invoked
 * @member {String} method
 */
MeteringRequestDTO.prototype.method = undefined;

/**
 * The HTTP URL being invoked
 * @member {String} url
 */
MeteringRequestDTO.prototype.url = undefined;

/**
 * Additional billing metadata (supports numeric values and comma-seperated key-value pairs)
 * @member {String} metadata
 */
MeteringRequestDTO.prototype.metadata = undefined;

/**
 * Backend API response time
 * @member {Number} backendLatency
 */
MeteringRequestDTO.prototype.backendLatency = undefined;

/**
 * Latency introduced by the API GW
 * @member {Number} gatewayLatency
 */
MeteringRequestDTO.prototype.gatewayLatency = undefined;

/**
 * Backend HTTP response code
 * @member {Number} responseCode
 */
MeteringRequestDTO.prototype.responseCode = undefined;

/**
 * Whether or not the backend timed out
 * @member {Boolean} timedOut
 */
MeteringRequestDTO.prototype.timedOut = undefined;

/**
 * The size of the API request in bytes
 * @member {Number} requestMessageSize
 */
MeteringRequestDTO.prototype.requestMessageSize = undefined;

/**
 * The size of the API response in bytes
 * @member {Number} responseMessageSize
 */
MeteringRequestDTO.prototype.responseMessageSize = undefined;

/**
 * The comma seperated list of names of the headers in the request
 * @member {Array.<String>} requestHeaders
 */
MeteringRequestDTO.prototype.requestHeaders = undefined;

/**
 * The comma seperated list of names of the headers in the response
 * @member {Array.<String>} responseHeaders
 */
MeteringRequestDTO.prototype.responseHeaders = undefined;

/**
 * The HTTP User Agent
 * @member {String} userAgent
 */
MeteringRequestDTO.prototype.userAgent = undefined;

/**
 * The Remote User
 * @member {String} remoteUser
 */
MeteringRequestDTO.prototype.remoteUser = undefined;

/**
 * The Remote Host
 * @member {String} remoteHost
 */
MeteringRequestDTO.prototype.remoteHost = undefined;

/**
 * The HTTP Protocol
 * @member {String} httpProtocol
 */
MeteringRequestDTO.prototype.httpProtocol = undefined;

/**
 * The Content Type
 * @member {String} contentType
 */
MeteringRequestDTO.prototype.contentType = undefined;

/**
 * The Correlation ID
 * @member {String} correlationId
 */
MeteringRequestDTO.prototype.correlationId = undefined;

/**
 * platformAPIKey
 * @member {String} platformAPIKey
 */
MeteringRequestDTO.prototype.platformAPIKey = undefined;

/**
 * Dynamic metering elements
 * @member {Array.<module:model/ElementDTO>} elements
 */
MeteringRequestDTO.prototype.elements = undefined;

/**
 * the source of the event
 * @member {String} source
 */
MeteringRequestDTO.prototype.source = undefined;

